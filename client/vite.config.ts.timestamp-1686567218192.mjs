// vite.config.ts
import { defineConfig } from "file:///Users/alexanderschellenberg/Desktop/study_prog/Sem4/projects/team_06/client/node_modules/vite/dist/node/index.js";
import postcssPresetEnv from "file:///Users/alexanderschellenberg/Desktop/study_prog/Sem4/projects/team_06/client/node_modules/postcss-preset-env/dist/index.mjs";

// vite-lit-css-plugin.ts
var cssMap = /* @__PURE__ */ new Map();
function litCssPlugin() {
  return [
    {
      name: "vite-plugin-lit-css-pre",
      transform(code, id) {
        if (id.includes("/components/") && (id.endsWith(".css?inline") || id.endsWith(".css?used&inline"))) {
          cssMap.set(id, code);
        }
        return code;
      }
    },
    {
      name: "vite-plugin-lit-css-post",
      enforce: "post",
      transform(code, id) {
        if (cssMap.has(id)) {
          const css = cssMap.get(id);
          cssMap.delete(id);
          return `import {css} from 'lit'; export default css\`${css}\`;`;
        }
      }
    }
  ];
}

// vite-html-replace-plugin.ts
function htmlReplacePlugin(replacements) {
  return {
    name: "html-replace-plugin",
    transformIndexHtml: {
      enforce: "post",
      transform(html) {
        for (const replacement of replacements) {
          html = html.replace(replacement[0], replacement[1]);
        }
        return html;
      }
    }
  };
}

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [
    litCssPlugin(),
    {
      ...htmlReplacePlugin([
        [`href="/"`, `href="/app/"`],
        [/\/assets/g, `./assets`]
      ]),
      apply: "build"
    }
  ],
  server: { port: 8080 },
  css: {
    postcss: {
      plugins: [postcssPresetEnv({ stage: 2 })]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAidml0ZS1saXQtY3NzLXBsdWdpbi50cyIsICJ2aXRlLWh0bWwtcmVwbGFjZS1wbHVnaW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvYWxleGFuZGVyc2NoZWxsZW5iZXJnL0Rlc2t0b3Avc3R1ZHlfcHJvZy9TZW00L3Byb2plY3RzL3RlYW1fMDYvY2xpZW50XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvYWxleGFuZGVyc2NoZWxsZW5iZXJnL0Rlc2t0b3Avc3R1ZHlfcHJvZy9TZW00L3Byb2plY3RzL3RlYW1fMDYvY2xpZW50L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9hbGV4YW5kZXJzY2hlbGxlbmJlcmcvRGVza3RvcC9zdHVkeV9wcm9nL1NlbTQvcHJvamVjdHMvdGVhbV8wNi9jbGllbnQvdml0ZS5jb25maWcudHNcIjsvKiBBdXRvcjogUHJvZi4gRHIuIE5vcm1hbiBMYWhtZS1IXHUwMEZDdGlnIChGSCBNXHUwMEZDbnN0ZXIpICovXG5cbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHBvc3Rjc3NQcmVzZXRFbnYgZnJvbSAncG9zdGNzcy1wcmVzZXQtZW52JztcbmltcG9ydCB2aXRlTGl0Q3NzUGx1Z2luIGZyb20gJy4vdml0ZS1saXQtY3NzLXBsdWdpbi5qcyc7XG5pbXBvcnQgdml0ZUh0bWxSZXBsYWNlUGx1Z2luIGZyb20gJy4vdml0ZS1odG1sLXJlcGxhY2UtcGx1Z2luLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgcGx1Z2luczogW1xuICAgIHZpdGVMaXRDc3NQbHVnaW4oKSxcbiAgICB7XG4gICAgICAuLi52aXRlSHRtbFJlcGxhY2VQbHVnaW4oW1xuICAgICAgICBbYGhyZWY9XCIvXCJgLCBgaHJlZj1cIi9hcHAvXCJgXSxcbiAgICAgICAgWy9cXC9hc3NldHMvZywgYC4vYXNzZXRzYF1cbiAgICAgIF0pLFxuICAgICAgYXBwbHk6ICdidWlsZCdcbiAgICB9XG4gIF0sXG4gIHNlcnZlcjogeyBwb3J0OiA4MDgwIH0sXG4gIGNzczoge1xuICAgIHBvc3Rjc3M6IHtcbiAgICAgIHBsdWdpbnM6IFtwb3N0Y3NzUHJlc2V0RW52KHsgc3RhZ2U6IDIgfSldXG4gICAgfVxuICB9XG59KTtcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2FsZXhhbmRlcnNjaGVsbGVuYmVyZy9EZXNrdG9wL3N0dWR5X3Byb2cvU2VtNC9wcm9qZWN0cy90ZWFtXzA2L2NsaWVudFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2FsZXhhbmRlcnNjaGVsbGVuYmVyZy9EZXNrdG9wL3N0dWR5X3Byb2cvU2VtNC9wcm9qZWN0cy90ZWFtXzA2L2NsaWVudC92aXRlLWxpdC1jc3MtcGx1Z2luLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9hbGV4YW5kZXJzY2hlbGxlbmJlcmcvRGVza3RvcC9zdHVkeV9wcm9nL1NlbTQvcHJvamVjdHMvdGVhbV8wNi9jbGllbnQvdml0ZS1saXQtY3NzLXBsdWdpbi50c1wiOy8qIEF1dG9yOiBQcm9mLiBEci4gTm9ybWFuIExhaG1lLUhcdTAwRkN0aWcgKEZIIE1cdTAwRkNuc3RlcikgKi9cblxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAndml0ZSc7XG5cbmNvbnN0IGNzc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpdENzc1BsdWdpbigpOiBQbHVnaW5bXSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgbmFtZTogJ3ZpdGUtcGx1Z2luLWxpdC1jc3MtcHJlJyxcbiAgICAgIHRyYW5zZm9ybShjb2RlOiBzdHJpbmcsIGlkOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGlkLmluY2x1ZGVzKCcvY29tcG9uZW50cy8nKSAmJiAoaWQuZW5kc1dpdGgoJy5jc3M/aW5saW5lJykgfHwgaWQuZW5kc1dpdGgoJy5jc3M/dXNlZCZpbmxpbmUnKSkpIHtcbiAgICAgICAgICBjc3NNYXAuc2V0KGlkLCBjb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICd2aXRlLXBsdWdpbi1saXQtY3NzLXBvc3QnLFxuICAgICAgZW5mb3JjZTogJ3Bvc3QnLFxuICAgICAgdHJhbnNmb3JtKGNvZGU6IHN0cmluZywgaWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoY3NzTWFwLmhhcyhpZCkpIHtcbiAgICAgICAgICBjb25zdCBjc3MgPSBjc3NNYXAuZ2V0KGlkKTtcbiAgICAgICAgICBjc3NNYXAuZGVsZXRlKGlkKTtcbiAgICAgICAgICByZXR1cm4gYGltcG9ydCB7Y3NzfSBmcm9tICdsaXQnOyBleHBvcnQgZGVmYXVsdCBjc3NcXGAke2Nzc31cXGA7YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXTtcbn1cbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2FsZXhhbmRlcnNjaGVsbGVuYmVyZy9EZXNrdG9wL3N0dWR5X3Byb2cvU2VtNC9wcm9qZWN0cy90ZWFtXzA2L2NsaWVudFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2FsZXhhbmRlcnNjaGVsbGVuYmVyZy9EZXNrdG9wL3N0dWR5X3Byb2cvU2VtNC9wcm9qZWN0cy90ZWFtXzA2L2NsaWVudC92aXRlLWh0bWwtcmVwbGFjZS1wbHVnaW4udHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL2FsZXhhbmRlcnNjaGVsbGVuYmVyZy9EZXNrdG9wL3N0dWR5X3Byb2cvU2VtNC9wcm9qZWN0cy90ZWFtXzA2L2NsaWVudC92aXRlLWh0bWwtcmVwbGFjZS1wbHVnaW4udHNcIjsvKiBBdXRvcjogUHJvZi4gRHIuIE5vcm1hbiBMYWhtZS1IXHUwMEZDdGlnIChGSCBNXHUwMEZDbnN0ZXIpICovXG5cbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ3ZpdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBodG1sUmVwbGFjZVBsdWdpbihyZXBsYWNlbWVudHM6IEFycmF5PFtzdHJpbmcgfCBSZWdFeHAsIHN0cmluZ10+KTogUGx1Z2luIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnaHRtbC1yZXBsYWNlLXBsdWdpbicsXG4gICAgdHJhbnNmb3JtSW5kZXhIdG1sOiB7XG4gICAgICBlbmZvcmNlOiAncG9zdCcsXG4gICAgICB0cmFuc2Zvcm0oaHRtbDogc3RyaW5nKSB7XG4gICAgICAgIGZvciAoY29uc3QgcmVwbGFjZW1lbnQgb2YgcmVwbGFjZW1lbnRzKSB7XG4gICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZShyZXBsYWNlbWVudFswXSwgcmVwbGFjZW1lbnRbMV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFFQSxTQUFTLG9CQUFvQjtBQUM3QixPQUFPLHNCQUFzQjs7O0FDQzdCLElBQU0sU0FBUyxvQkFBSSxJQUFvQjtBQUV4QixTQUFSLGVBQTBDO0FBQy9DLFNBQU87QUFBQSxJQUNMO0FBQUEsTUFDRSxNQUFNO0FBQUEsTUFDTixVQUFVLE1BQWMsSUFBWTtBQUNsQyxZQUFJLEdBQUcsU0FBUyxjQUFjLE1BQU0sR0FBRyxTQUFTLGFBQWEsS0FBSyxHQUFHLFNBQVMsa0JBQWtCLElBQUk7QUFDbEcsaUJBQU8sSUFBSSxJQUFJLElBQUk7QUFBQSxRQUNyQjtBQUNBLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUFBLElBQ0E7QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLFNBQVM7QUFBQSxNQUNULFVBQVUsTUFBYyxJQUFZO0FBQ2xDLFlBQUksT0FBTyxJQUFJLEVBQUUsR0FBRztBQUNsQixnQkFBTSxNQUFNLE9BQU8sSUFBSSxFQUFFO0FBQ3pCLGlCQUFPLE9BQU8sRUFBRTtBQUNoQixpQkFBTyxnREFBZ0Q7QUFBQSxRQUN6RDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGOzs7QUN6QmUsU0FBUixrQkFBbUMsY0FBd0Q7QUFDaEcsU0FBTztBQUFBLElBQ0wsTUFBTTtBQUFBLElBQ04sb0JBQW9CO0FBQUEsTUFDbEIsU0FBUztBQUFBLE1BQ1QsVUFBVSxNQUFjO0FBQ3RCLG1CQUFXLGVBQWUsY0FBYztBQUN0QyxpQkFBTyxLQUFLLFFBQVEsWUFBWSxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7QUFBQSxRQUNwRDtBQUNBLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFDRjs7O0FGVkEsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUztBQUFBLElBQ1AsYUFBaUI7QUFBQSxJQUNqQjtBQUFBLE1BQ0UsR0FBRyxrQkFBc0I7QUFBQSxRQUN2QixDQUFDLFlBQVksY0FBYztBQUFBLFFBQzNCLENBQUMsYUFBYSxVQUFVO0FBQUEsTUFDMUIsQ0FBQztBQUFBLE1BQ0QsT0FBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBQUEsRUFDQSxRQUFRLEVBQUUsTUFBTSxLQUFLO0FBQUEsRUFDckIsS0FBSztBQUFBLElBQ0gsU0FBUztBQUFBLE1BQ1AsU0FBUyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFBQSxJQUMxQztBQUFBLEVBQ0Y7QUFDRixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
